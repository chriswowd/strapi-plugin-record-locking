{"version":3,"file":"index.mjs","sources":["../../admin/src/pluginId.ts","../../admin/src/utils/getTranslation.ts","../../admin/src/components/EntityLock/index.tsx","../../admin/src/components/Initializer.tsx","../../admin/src/index.ts"],"sourcesContent":["import pluginPkg from '../../package.json';\r\n\r\nexport const PLUGIN_ID = pluginPkg.name.replace(/^@notum-cz\\/strapi-plugin-/i, '');\r\n","import { PLUGIN_ID } from '../pluginId';\r\n\r\nconst getTranslation = (id: string) => `${PLUGIN_ID}.${id}`;\r\n\r\nexport { getTranslation };\r\n","import { Button, Typography } from '@strapi/design-system';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\nimport { useMatch, useNavigate } from 'react-router-dom';\r\n\r\nimport { Modal } from '@strapi/design-system';\r\nimport { useAuth, useFetchClient } from '@strapi/strapi/admin';\r\nimport { getTranslation } from '../../utils/getTranslation';\r\n\r\nconst useLockingData = () => {\r\n  const collectionType = useMatch('/content-manager/collection-types/:entityId/:entityDocumentId');\r\n  const singleType = useMatch('/content-manager/single-types/:entityId');\r\n  const user = useAuth('ENTITY_LOCK', (state) => state.user);\r\n\r\n  if (!user) return null;\r\n\r\n  if (collectionType) {\r\n    return {\r\n      requestData: {\r\n        entityId: collectionType.params.entityId,\r\n        entityDocumentId: collectionType.params.entityDocumentId,\r\n        userId: user.id,\r\n      },\r\n      requestUrl: `/record-locking/get-status/${collectionType.params.entityId}/${collectionType.params.entityDocumentId}`,\r\n    };\r\n  } else if (singleType) {\r\n    return {\r\n      requestData: {\r\n        entityId: singleType.params.entityId,\r\n        userId: user.id,\r\n      },\r\n      requestUrl: `/record-locking/get-status/${singleType.params.entityId}`,\r\n    };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst useLockStatus = () => {\r\n  const { get } = useFetchClient();\r\n  const lockingData = useLockingData();\r\n\r\n  const socket = useRef<Socket | null>(null);\r\n  const [isLocked, setIsLocked] = useState<boolean>(false);\r\n  const [username, setUsername] = useState<string>('');\r\n  const [settings, setSettings] = useState<{ transports: Array<string> } | null>(null);\r\n\r\n  useEffect(() => {\r\n    get('/record-locking/settings').then((response) => {\r\n      setSettings(response.data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('jwtToken') || sessionStorage.getItem('jwtToken');\r\n\r\n    if (token && lockingData?.requestData.entityDocumentId !== 'create' && settings) {\r\n      socket.current = io(undefined, {\r\n        reconnectionDelayMax: 10000,\r\n        rejectUnauthorized: false,\r\n        auth: (cb) => {\r\n          cb({\r\n            token: JSON.parse(token),\r\n          });\r\n        },\r\n        transports: settings.transports,\r\n      });\r\n      socket.current.io.on('reconnect', attemptEntityLocking);\r\n      attemptEntityLocking();\r\n    }\r\n\r\n    return () => {\r\n      if (lockingData?.requestData.entityDocumentId !== 'create' && settings) {\r\n        socket.current?.emit('closeEntity', lockingData?.requestData);\r\n        socket.current?.close();\r\n      }\r\n    };\r\n  }, [settings]);\r\n\r\n  if (!lockingData?.requestUrl) return null;\r\n\r\n  const attemptEntityLocking = async () => {\r\n    try {\r\n      const lockingResponse = await get(lockingData.requestUrl);\r\n      if (!lockingResponse.data) {\r\n        socket.current?.emit('openEntity', lockingData?.requestData);\r\n      } else {\r\n        setIsLocked(true);\r\n        setUsername(lockingResponse.data.editedBy);\r\n      }\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    isLocked,\r\n    username,\r\n    attemptEntityLocking,\r\n  };\r\n};\r\n\r\nexport default function EntityLock() {\r\n  const navigate = useNavigate();\r\n  const { formatMessage } = useIntl();\r\n  const lockStatus = useLockStatus();\r\n\r\n  if (!lockStatus) return null;\r\n\r\n  return (\r\n    lockStatus.isLocked && (\r\n      <Modal.Root open={true} onOpenChange={() => {}} modal={true}>\r\n        <Modal.Content>\r\n          <Modal.Header>\r\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\r\n              {formatMessage({\r\n                id: getTranslation('ModalWindow.CurrentlyEditing'),\r\n                defaultMessage: 'This entry is currently edited',\r\n              })}\r\n            </Typography>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Typography>\r\n              {formatMessage(\r\n                {\r\n                  id: getTranslation('ModalWindow.CurrentlyEditingBody'),\r\n                  defaultMessage: 'This entry is currently edited by {username}',\r\n                },\r\n                {\r\n                  username: <Typography fontWeight=\"bold\">{lockStatus.username}</Typography>,\r\n                }\r\n              )}\r\n            </Typography>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {/* Remove the Close button to prevent manual dismissal */}\r\n            <Button\r\n              onClick={() => {\r\n                navigate(-1);\r\n              }}\r\n            >\r\n              {formatMessage({\r\n                id: getTranslation('ModalWindow.CurrentlyEditing.Button'),\r\n                defaultMessage: 'Go Back',\r\n              })}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal.Content>\r\n      </Modal.Root>\r\n    )\r\n  );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nimport { PLUGIN_ID } from '../pluginId';\r\n\r\ntype InitializerProps = {\r\n  setPlugin: (id: string) => void;\r\n};\r\n\r\nconst Initializer = ({ setPlugin }: InitializerProps) => {\r\n  const ref = useRef(setPlugin);\r\n\r\n  useEffect(() => {\r\n    ref.current(PLUGIN_ID);\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport { Initializer };\r\n","import EntityLock from './components/EntityLock';\r\nimport { Initializer } from './components/Initializer';\r\nimport { PLUGIN_ID } from './pluginId';\r\n\r\nexport default {\r\n  register(app: any) {\r\n    app.registerPlugin({\r\n      id: PLUGIN_ID,\r\n      initializer: Initializer,\r\n      isReady: false,\r\n      name: PLUGIN_ID,\r\n    });\r\n  },\r\n\r\n  bootstrap(app: any) {\r\n    app.getPlugin('content-manager').injectComponent('editView', 'right-links', {\r\n      name: 'EntityLock',\r\n      Component: EntityLock,\r\n    });\r\n  },\r\n\r\n  async registerTrads(app: any) {\r\n    const { locales } = app;\r\n\r\n    const importedTranslations = await Promise.all(\r\n      (locales as string[]).map((locale) => {\r\n        return import(`./translations/${locale}.json`)\r\n          .then(({ default: data }) => {\r\n            return {\r\n              data: prefixPluginTranslations(data, PLUGIN_ID),\r\n              locale,\r\n            };\r\n          })\r\n          .catch(() => {\r\n            return {\r\n              data: {},\r\n              locale,\r\n            };\r\n          });\r\n      })\r\n    );\r\n\r\n    return importedTranslations;\r\n  },\r\n};\r\ntype TradOptions = Record<string, string>;\r\n\r\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\r\n  if (!pluginId) {\r\n    throw new TypeError(\"pluginId can't be empty\");\r\n  }\r\n  return Object.keys(trad).reduce((acc, current) => {\r\n    acc[`${pluginId}.${current}`] = trad[current];\r\n    return acc;\r\n  }, {} as TradOptions);\r\n};\r\n"],"names":[],"mappings":"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"}