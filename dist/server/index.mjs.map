{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/content-types/open-entity.ts","../../server/src/content-types/index.ts","../../server/src/constants/transports.ts","../../server/src/controllers/controller.ts","../../server/src/controllers/index.ts","../../server/src/routes/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/strapi';\r\nimport { Server } from 'socket.io';\r\n\r\nconst bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {\r\n  // bootstrap phase\r\n\r\n  const io = new Server(strapi.server.httpServer);\r\n\r\n  io.on('connection', (socket) => {\r\n    socket.on('openEntity', async ({ entityDocumentId, entityId }) => {\r\n      const userId = strapi.admin.services.token.decodeJwtToken(socket.handshake.auth.token).payload\r\n        .id;\r\n\r\n      const usersPermissionsForThisContent = await strapi.db.connection\r\n        .select('p.id', 'p.action', 'p.subject')\r\n        .from('admin_permissions AS p')\r\n        .innerJoin('admin_permissions_role_lnk AS prl', 'p.id', 'prl.permission_id')\r\n        .innerJoin('admin_users_roles_lnk AS url', 'prl.role_id', 'url.role_id')\r\n        .where('url.user_id', userId)\r\n        .andWhere('p.subject', entityId);\r\n      const userHasAdequatePermissions =\r\n        usersPermissionsForThisContent.filter((perm) =>\r\n          ['create', 'delete', 'publish'].some((operation) => perm.action.includes(operation))\r\n        ).length !== 0;\r\n      if (userHasAdequatePermissions) {\r\n        await strapi.db.query('plugin::record-locking.open-entity').create({\r\n          data: {\r\n            user: String(userId),\r\n            entityId,\r\n            entityDocumentId,\r\n            connectionId: socket.id,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    socket.on('closeEntity', async ({ entityId, entityDocumentId, userId }) => {\r\n      await strapi.db.query('plugin::record-locking.open-entity').deleteMany({\r\n        where: {\r\n          user: String(userId),\r\n          entityId: entityId,\r\n          entityDocumentId,\r\n        },\r\n      });\r\n    });\r\n\r\n    socket.on('disconnect', async () => {\r\n      await strapi.db.query('plugin::record-locking.open-entity').deleteMany({\r\n        where: {\r\n          connectionId: socket.id,\r\n        },\r\n      });\r\n    });\r\n  });\r\n\r\n  strapi.db.query('plugin::record-locking.open-entity').deleteMany();\r\n  (strapi as any).io = io;\r\n};\r\n\r\nexport default bootstrap;\r\n","import type {Server} from \"socket.io\"\r\nimport type { Core } from '@strapi/strapi';\r\n\r\nconst destroy = ({ strapi }: { strapi: Core.Strapi & {io?: Server} }) => {\r\n  if (strapi?.io?.close) {\r\n    strapi.io.close();\r\n  }\r\n  \r\n  strapi.db.query('plugin::record-locking.open-entity').deleteMany();\r\n};\r\n\r\nexport default destroy;\r\n","export default {\r\n  kind: 'collectionType',\r\n  collectionName: 'open-entity',\r\n  info: {\r\n    singularName: 'open-entity',\r\n    pluralName: 'open-entities',\r\n    displayName: 'Open Entity',\r\n    description: 'List of open entities for record locking plugin.',\r\n  },\r\n  options: {\r\n    draftAndPublish: false,\r\n  },\r\n  pluginOptions: {\r\n    'content-manager': {\r\n      visible: true,\r\n    },\r\n    'content-type-builder': {\r\n      visible: false,\r\n    },\r\n  },\r\n  attributes: {\r\n    entityDocumentId: {\r\n      type: 'string',\r\n      configurable: false,\r\n    },\r\n    entityId: {\r\n      type: 'string',\r\n      configurable: false,\r\n    },\r\n    user: {\r\n      type: 'string',\r\n      configurable: false,\r\n    },\r\n    connectionId: {\r\n      type: 'string',\r\n      configurable: false,\r\n    },\r\n  },\r\n};\r\n","import openEntity from './open-entity';\r\n\r\nexport default {\r\n  'open-entity': { schema: openEntity },\r\n};\r\n","export default ['polling', 'websocket', 'webtransport'];\r\n","import type { Core } from '@strapi/strapi';\r\nimport DEFAULT_TRANSPORTS from '../constants/transports';\r\n\r\nconst controller = ({ strapi }: { strapi: Core.Strapi }) => ({\r\n  async getSettings(ctx) {\r\n    const settings = {\r\n      transports:\r\n        strapi.plugin('record-locking').config('transports') || DEFAULT_TRANSPORTS,\r\n    };\r\n\r\n    ctx.send(settings);\r\n  },\r\n\r\n  async getStatusBySlug(ctx) {\r\n    const { entityDocumentId } = ctx.request.params;\r\n    const { id: userId } = ctx.state.user;\r\n\r\n    const data = await strapi.db.query('plugin::record-locking.open-entity').findOne({\r\n      where: {\r\n        entityDocumentId,\r\n        user: {\r\n          $not: userId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (data) {\r\n      const user = await strapi.db.query('admin::user').findOne({ where: { id: data.user } });\r\n\r\n      return {\r\n        editedBy: `${user.firstname} ${user.lastname}`,\r\n      };\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  async getStatusByIdAndSlug(ctx) {\r\n    const { entityId, entityDocumentId } = ctx.request.params;\r\n    const { id: userId } = ctx.state.user;\r\n    const data = await strapi.db.query('plugin::record-locking.open-entity').findOne({\r\n      where: {\r\n        entityDocumentId,\r\n        entityId,\r\n        user: {\r\n          $not: userId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (data) {\r\n      const user = await strapi.db.query('admin::user').findOne({ where: { id: data.user } });\r\n\r\n      return {\r\n        editedBy: `${user.firstname} ${user.lastname}`,\r\n      };\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  async setStatusByIdAndSlug(ctx) {\r\n    const { entityId, entityDocumentId } = ctx.request.params;\r\n    const { id: userId } = ctx.state.user;\r\n\r\n    await strapi.db.query('plugin::record-locking.open-entity').create({\r\n      data: {\r\n        user: String(userId),\r\n        entityId: entityId,\r\n        entityDocumentId,\r\n      },\r\n    });\r\n\r\n    return true;\r\n  },\r\n\r\n  async deleteStatusByIdAndSlug(ctx) {\r\n    const { entityId, entityDocumentId } = ctx.request.params;\r\n    const { id: userId } = ctx.state.user;\r\n\r\n    await strapi.db.query('plugin::record-locking.open-entity').deleteMany({\r\n      where: {\r\n        user: String(userId),\r\n        entityId: entityId,\r\n        entityDocumentId,\r\n      },\r\n    });\r\n\r\n    return 'DELETED';\r\n  },\r\n});\r\n\r\nexport default controller;\r\n","import controller from './controller';\r\n\r\nexport default {\r\n  controller,\r\n};\r\n","export default [\r\n  {\r\n    method: 'GET',\r\n    path: '/settings',\r\n    handler: 'controller.getSettings',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/get-status/:entityDocumentId',\r\n    handler: 'controller.getStatusBySlug',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'GET',\r\n    path: '/get-status/:entityId/:entityDocumentId',\r\n    handler: 'controller.getStatusByIdAndSlug',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'POST',\r\n    path: '/set-status/:entityId/:entityDocumentId',\r\n    handler: 'controller.setStatusByIdAndSlug',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n  {\r\n    method: 'DELETE',\r\n    path: '/delete-status/:entityId/:entityDocumentId',\r\n    handler: 'controller.deleteStatusByIdAndSlug',\r\n    config: {\r\n      policies: [],\r\n    },\r\n  },\r\n];\r\n","/**\r\n * Application methods\r\n */\r\nimport bootstrap from './bootstrap';\r\nimport destroy from './destroy';\r\n\r\n/**\r\n * Plugin server methods\r\n */\r\nimport contentTypes from './content-types';\r\nimport controllers from './controllers';\r\nimport routes from './routes';\r\n\r\nexport default {\r\n  bootstrap,\r\n  destroy,\r\n  controllers,\r\n  routes,\r\n  contentTypes,\r\n};\r\n"],"names":[],"mappings":"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"}